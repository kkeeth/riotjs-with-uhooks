<todo>
  <div id="container">
    <h1>ToDo App</h1>

    <todo-form
      next-id={ nextId }
      set-next-id={ setNextId }
      todo-list={ todoList }
      set-todo-list={ setTodoList }
      has-done-todo={ hasDoneTodo }
      set-has-done-todo={ setHasDoneTodo }
      delete-done-todos={ deleteDoneTodos }
    />

    <h4>todo list</h4>
    <ul>
      <li each={ todo in todoList } key={ todo.id }>
        <label class={ todo.done ? 'completed' : null }>
          <input
            type="checkbox"
            checked={ todo.done }
            onclick={ () => toggle(todo) }
          >
          { todo.title }
        </label>
        <button class="danger" onclick={ () => deleteTodo(todo) }>
          delete
        </button>
      </li>
    </ul>
    <p if={ todoList.length === 0 }>No Todos</p>
  </div>

  <script>
    import { useState } from 'uhooks'
    import { todoPage } from '../libs/withHook'
    import TodoForm from '../components/includes/todos/todo-form.riot'
    import TodoList from '../components/includes/todos/todo-list.riot'

    export default todoPage(props => {
      const { initialNextId, initialTodoList } = props
      const [nextId, setNextId] = useState(initialNextId)
      const [todoList, setTodoList] = useState(initialTodoList)
      const [hasDoneTodo, setHasDoneTodo] = useState(initialTodoList)

      const toggle = (todo) => {
        todo.done = !todo.done
        setHasDoneTodo(checkDoneTodo())
      }
      const checkDoneTodo = (updatedTodoList) => {
        const tmpList = updatedTodoList || todoList
        return tmpList.some(item => item.done === true)
      }
      const deleteTodo = (todo) => {
        if (window.confirm('本当に削除してもよろしいですか? ')) {
          const updatedTodoList
            = todoList.filter(item => item.id !== todo.id)
          setHasDoneTodo(checkDoneTodo(updatedTodoList))
          setTodoList(updatedTodoList)
        }
      }
      const deleteDoneTodos = () => {
        if (window.confirm('本当に全てのtodoを削除してもよろしいですか? ')) {
          this.update({
            hasDoneTodo: false,
            todoList: this.state.todoList.filter(item => item.done !== true)
          })
        }
      }

      return {
        nextId,
        setNextId,
        todoList,
        setTodoList,
        hasDoneTodo,
        setHasDoneTodo,
        deleteDoneTodos,
        toggle,
        checkDoneTodo,
        deleteTodo,
        deleteDoneTodos,
      }
    }, {
      TodoForm,
      TodoList,
    })
  </script>

  <style>
  #container {
    display: block;
    max-width: 600px;
    margin: 5% auto;
    padding: 20px;
    box-shadow:
      0 2px 2px 0 rgba(0,0,0,.14),
      0 3px 1px -2px rgba(0,0,0,.2),
      0 1px 5px 0 rgba(0,0,0,.12);
  }
  h4 {
    border-top: 1px solid #aaa;
    padding-top: 1rem;
  }
  input {
    margin-bottom: 1rem;
  }
  ul {
    padding: 0;
  }
  li {
    list-style-type: none;
    padding: 0.2em 0;
    display: flex;
    justify-content: space-between;
  }
  li:hover {
    background-color: #eee;
  }
  li .completed {
    text-decoration: line-through;
    color: #ccc;
  }
  input[type="checkbox"] {
    margin-right: 10px;
    margin-bottom: 0;
  }
  button + button {
    margin-left: 1rem;
  }
  </style>
</todo>